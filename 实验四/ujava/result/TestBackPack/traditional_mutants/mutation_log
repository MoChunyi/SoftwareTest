AOIU_1:25:void_testBackPack():m => -m
AOIU_2:25:void_testBackPack():n => -n
AOIU_3:26:void_testBackPack():n => -n
AOIU_4:26:void_testBackPack():m => -m
AOIS_1:25:void_testBackPack():m => m++
AOIS_2:25:void_testBackPack():m => m--
AOIS_3:25:void_testBackPack():n => n++
AOIS_4:25:void_testBackPack():n => n--
AOIS_5:26:void_testBackPack():n => n++
AOIS_6:26:void_testBackPack():n => n--
AOIS_7:26:void_testBackPack():m => m++
AOIS_8:26:void_testBackPack():m => m--
LOI_1:25:void_testBackPack():m => ~m
LOI_2:25:void_testBackPack():n => ~n
LOI_3:26:void_testBackPack():n => ~n
LOI_4:26:void_testBackPack():m => ~m
SDL_1:16:void_setBackPack(): backPack = new BackPack();  =>  
SDL_2:26:void_testBackPack(): int m = 10; int n = 3; int[] w = { 3, 4, 5 }; int[] p = { 4, 5, 6 }; int[][] c = backPack.BackPack_Solution( m, n, w, p ); backPack.printPack( c, n, m );  =>   int m = 10; int n = 3; int[] w = { 3, 4, 5 }; int[] p = { 4, 5, 6 }; int[][] c = backPack.BackPack_Solution( m, n, w, p );
